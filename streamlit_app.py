# ================================
# FIXED STREAMLIT WEB UI FOR MULTI-AGENT SYSTEM
# ================================
# SOLUTION: Python 3.13 compatibility fix for ChromaDB error
# Works with Streamlit Community Cloud deployment
# ================================

import streamlit as st
import os
import time
from datetime import datetime
import json
import io

# Fix for Python 3.13 ChromaDB error - Use conditional imports
try:
    from crewai import Agent, Task, Crew, Process
    from crewai.llm import LLM
    CREWAI_AVAILABLE = True
except ImportError as e:
    st.error(f"CrewAI import error: {e}")
    CREWAI_AVAILABLE = False

# DOCX Libraries with error handling
try:
    from docx import Document
    from docx.shared import Inches, Pt
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    from docx.enum.style import WD_STYLE_TYPE
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False

# Page Configuration
st.set_page_config(
    page_title="Multi-Agent AI Analysis System",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f497d;
        text-align: center;
        margin-bottom: 2rem;
    }
    .agent-card {
        padding: 1rem;
        border-radius: 10px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        margin: 1rem 0;
    }
    .result-box {
        background: #f0f2f6;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 5px solid #1f497d;
    }
    .progress-text {
        font-size: 1.1rem;
        font-weight: bold;
    }
    .error-box {
        background: #ffebee;
        padding: 1.5rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 5px solid #f44336;
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state
if 'analysis_complete' not in st.session_state:
    st.session_state.analysis_complete = False
if 'results' not in st.session_state:
    st.session_state.results = None
if 'api_key' not in st.session_state:
    st.session_state.api_key = ''

# Simplified Document Formatter (no external dependencies)
class SimpleDocumentFormatter:
    def create_text_document(self, results):
        """Create a simple text document as fallback"""
        doc_content = f"""
MULTI-AGENT ANALYSIS REPORT
===========================

Query: {results['query']}
Generated: {results['timestamp']}
Analysis Method: Hybrid Multi-Agent System

RESEARCH FINDINGS
================
{results.get('research', 'No research data available')}

COMPREHENSIVE ANALYSIS
=====================
{results.get('analysis', 'No analysis data available')}

EXECUTIVE SYNTHESIS
==================
{results.get('final_report', 'No final report available')}

---
Generated by Multi-Agent AI Analysis System
Powered by CrewAI + Groq | Built with Streamlit
"""
        return doc_content.encode('utf-8')

# Simplified Multi-Agent System with error handling
class MultiAgentSystem:
    def __init__(self, api_key):
        if not CREWAI_AVAILABLE:
            raise ImportError("CrewAI is not available due to dependency issues")
            
        try:
            self.groq_llm = LLM(
                model="groq/llama-3.1-8b-instant",
                api_key=api_key,
                max_tokens=800,  # Reduced for stability
                temperature=0.1
            )
            self.setup_agents()
        except Exception as e:
            raise Exception(f"Failed to initialize LLM: {e}")
    
    def setup_agents(self):
        try:
            # Research Agent - Simplified
            self.research_agent = Agent(
                role='Research Specialist',
                goal='Conduct research using available knowledge',
                backstory="Expert researcher with comprehensive knowledge base.",
                verbose=False,
                allow_delegation=False,
                llm=self.groq_llm,
                max_iter=1,  # Reduced to prevent issues
                max_rpm=5    # Conservative rate limit
            )
            
            # Analysis Agent - Simplified  
            self.analysis_agent = Agent(
                role='Data Analyst',
                goal='Perform analysis and provide insights',
                backstory="Skilled analyst specializing in strategic insights.",
                verbose=False,
                allow_delegation=False,
                llm=self.groq_llm,
                max_iter=1,
                max_rpm=5
            )
            
            # Orchestrator Agent - Simplified
            self.orchestrator_agent = Agent(
                role='Report Synthesizer',
                goal='Create comprehensive executive reports',
                backstory="Expert at synthesizing information into executive reports.",
                verbose=False,
                allow_delegation=False,
                llm=self.groq_llm,
                max_iter=1,
                max_rpm=5
            )
        except Exception as e:
            raise Exception(f"Failed to setup agents: {e}")
    
    def create_simple_task(self, agent, description, expected_output):
        """Create a simplified task"""
        return Task(
            description=description,
            agent=agent,
            expected_output=expected_output
        )
    
    def run_analysis(self, user_query, progress_callback=None):
        """Run simplified multi-agent analysis"""
        results = {
            'query': user_query,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        try:
            # Phase 1: Research
            if progress_callback:
                progress_callback("üîç Research Agent working...", 25)
            
            research_task = self.create_simple_task(
                self.research_agent,
                f'Research and provide key information about: "{user_query}". Include facts, context, and current insights.',
                "Research findings with key information and context"
            )
            
            research_crew = Crew(
                agents=[self.research_agent],
                tasks=[research_task],
                process=Process.sequential,
                verbose=False,
                max_rpm=5
            )
            
            research_results = research_crew.kickoff()
            results['research'] = str(research_results)
            
            # Rate limiting pause
            time.sleep(10)
            
            # Phase 2: Analysis
            if progress_callback:
                progress_callback("üìä Analysis Agent working...", 60)
            
            analysis_task = self.create_simple_task(
                self.analysis_agent,
                f'Analyze "{user_query}" based on research: {str(research_results)[:500]}. Provide insights, implications, and 3 key recommendations.',
                "Analysis with insights and strategic recommendations"
            )
            
            analysis_crew = Crew(
                agents=[self.analysis_agent],
                tasks=[analysis_task],
                process=Process.sequential,
                verbose=False,
                max_rpm=5
            )
            
            analysis_results = analysis_crew.kickoff()
            results['analysis'] = str(analysis_results)
            
            # Final pause
            time.sleep(10)
            
            # Phase 3: Synthesis
            if progress_callback:
                progress_callback("üéØ Creating final report...", 90)
            
            synthesis_task = self.create_simple_task(
                self.orchestrator_agent,
                f'Create executive report for "{user_query}" using research and analysis data. Include: Executive Summary, Key Findings, Strategic Recommendations, and Conclusion.',
                "Executive-level comprehensive report"
            )
            
            synthesis_crew = Crew(
                agents=[self.orchestrator_agent],
                tasks=[synthesis_task],
                process=Process.sequential,
                verbose=False,
                max_rpm=5
            )
            
            final_results = synthesis_crew.kickoff()
            results['final_report'] = str(final_results)
            
            if progress_callback:
                progress_callback("‚úÖ Analysis Complete!", 100)
            
            return results
            
        except Exception as e:
            if progress_callback:
                progress_callback(f"‚ùå Error: {str(e)}", 0)
            return {'error': str(e)}

# Main Application
def main():
    # Header
    st.markdown('<h1 class="main-header">ü§ñ Multi-Agent AI Analysis System</h1>', unsafe_allow_html=True)
    
    # Check system compatibility
    if not CREWAI_AVAILABLE:
        st.markdown("""
        <div class="error-box">
        <h3>‚ö†Ô∏è System Compatibility Issue</h3>
        <p>There's a compatibility issue with Python 3.13 and ChromaDB dependencies in CrewAI.</p>
        <p><strong>Solutions:</strong></p>
        <ul>
        <li>This is a known issue with Streamlit Cloud's Python 3.13 environment</li>
        <li>The CrewAI team is working on Python 3.13 compatibility</li>
        <li>For now, you can run this locally with Python 3.11 or 3.12</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        ### Alternative Solutions:
        
        **Option 1: Local Development**
        1. Install Python 3.11 or 3.12 locally
        2. Run: `pip install crewai python-docx streamlit`
        3. Save the code and run: `streamlit run streamlit_app.py`
        
        **Option 2: Use Google Colab**
        1. Use the original Google Colab notebook version
        2. It works perfectly in Colab's Python 3.10 environment
        
        **Option 3: Wait for Fix**
        1. CrewAI team is working on Python 3.13 support
        2. This will be resolved in upcoming releases
        
        ### Technical Details:
        The error occurs because ChromaDB (a dependency of CrewAI) doesn't yet fully support Python 3.13. 
        This is being actively worked on by both the ChromaDB and CrewAI teams.
        """)
        return
    
    # Sidebar Configuration
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")
        
        # API Key Input
        api_key = st.text_input(
            "Groq API Key",
            type="password",
            help="Enter your Groq API key from console.groq.com"
        )
        
        if api_key:
            st.session_state.api_key = api_key
            st.success("‚úÖ API Key configured")
        else:
            st.warning("‚ö†Ô∏è Please enter your Groq API key")
        
        st.markdown("---")
        
        # System Information
        st.header("ü§ñ Agent System")
        st.markdown("""
        <div class="agent-card">
        <h4>üîç Research Agent</h4>
        <p>Gathers comprehensive information and context</p>
        </div>
        
        <div class="agent-card">
        <h4>üìä Analysis Agent</h4>
        <p>Performs strategic analysis and insights</p>
        </div>
        
        <div class="agent-card">
        <h4>üéØ Orchestrator Agent</h4>
        <p>Creates executive-level synthesis reports</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Main Interface
    if not api_key:
        st.info("üëà Please configure your Groq API key in the sidebar to get started")
        st.markdown("""
        ### Welcome to the Multi-Agent AI Analysis System
        
        **Features:**
        - üîç Comprehensive research and information gathering
        - üìä Strategic analysis with actionable insights  
        - üéØ Executive-level report synthesis
        - üìÑ Professional document export
        - ‚ö° Rate-limited for stability
        
        **Getting Started:**
        1. Get a free Groq API key at [console.groq.com](https://console.groq.com)
        2. Enter your API key in the sidebar
        3. Ask any question for comprehensive AI analysis
        """)
        return
    
    # Query Input
    st.header("üìù Analysis Query")
    user_query = st.text_area(
        "Enter your question for comprehensive multi-agent analysis:",
        placeholder="Example: What are the key investment opportunities in renewable energy?",
        height=100
    )
    
    # Analysis Controls
    col1, col2 = st.columns([1, 1])
    with col1:
        run_analysis = st.button("üöÄ Run Multi-Agent Analysis", type="primary", use_container_width=True)
    with col2:
        if st.session_state.analysis_complete and st.session_state.results:
            generate_doc = st.button("üìÑ Download Report", use_container_width=True)
        else:
            generate_doc = False
    
    # Analysis Process
    if run_analysis and user_query.strip():
        try:
            system = MultiAgentSystem(api_key)
            
            # Progress tracking
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            def update_progress(message, percent):
                progress_bar.progress(percent/100)
                status_text.markdown(f'<p class="progress-text">{message}</p>', unsafe_allow_html=True)
            
            # Run analysis
            with st.spinner("Initializing multi-agent system..."):
                results = system.run_analysis(user_query, update_progress)
            
            if 'error' in results:
                st.error(f"‚ùå Analysis failed: {results['error']}")
                if "rate_limit" in results['error'].lower():
                    st.info("üí° Rate limit reached. Please wait 60 seconds and try again.")
            else:
                st.session_state.results = results
                st.session_state.analysis_complete = True
                
                # Clear progress indicators
                progress_bar.empty()
                status_text.empty()
                
                # Display results
                display_results(results)
                
        except Exception as e:
            st.error(f"‚ùå System error: {e}")
            st.info("üí° Try refreshing the page or check your API key")
    
    elif st.session_state.analysis_complete and st.session_state.results:
        display_results(st.session_state.results)
    
    # Document Generation
    if generate_doc and st.session_state.results:
        generate_document(st.session_state.results)

def display_results(results):
    """Display analysis results"""
    st.header("üìã Analysis Results")
    
    # Executive Summary Box
    st.subheader("üéØ Executive Summary")
    final_report = str(results.get('final_report', ''))
    
    # Extract summary from final report
    if final_report:
        # Take first 300 characters as summary
        summary = final_report[:300] + "..." if len(final_report) > 300 else final_report
        st.markdown(f'<div class="result-box">{summary}</div>', unsafe_allow_html=True)
    
    # Tabbed Results
    tab1, tab2, tab3 = st.tabs(["üîç Research", "üìä Analysis", "üéØ Final Report"])
    
    with tab1:
        st.markdown("### Research Agent Output")
        research_content = results.get('research', 'No research data available')
        st.markdown(f'<div class="result-box">{research_content}</div>', unsafe_allow_html=True)
    
    with tab2:
        st.markdown("### Analysis Agent Output")
        analysis_content = results.get('analysis', 'No analysis data available')
        st.markdown(f'<div class="result-box">{analysis_content}</div>', unsafe_allow_html=True)
    
    with tab3:
        st.markdown("### Executive Report")
        final_content = results.get('final_report', 'No final report available')
        st.markdown(f'<div class="result-box">{final_content}</div>', unsafe_allow_html=True)
    
    # Metadata
    with st.expander("‚ÑπÔ∏è Analysis Metadata"):
        st.write(f"**Query:** {results.get('query', 'N/A')}")
        st.write(f"**Generated:** {results.get('timestamp', 'N/A')}")
        st.write(f"**System:** Multi-Agent (CrewAI + Groq)")
        st.write(f"**Processing:** ~3 minutes with rate limiting")

def generate_document(results):
    """Generate downloadable document"""
    try:
        formatter = SimpleDocumentFormatter()
        doc_bytes = formatter.create_text_document(results)
        
        if doc_bytes:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"Multi_Agent_Analysis_{timestamp}.txt"
            
            st.download_button(
                label="üìÑ Download Analysis Report",
                data=doc_bytes,
                file_name=filename,
                mime="text/plain",
                use_container_width=True
            )
            st.success("‚úÖ Report ready for download!")
        else:
            st.error("‚ùå Failed to generate document")
            
    except Exception as e:
        st.error(f"‚ùå Document generation error: {e}")

# Footer
def footer():
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
    <p>Multi-Agent AI Analysis System | Powered by CrewAI + Groq | Built with Streamlit</p>
    <p>ü§ñ Research ‚Ä¢ üìä Analysis ‚Ä¢ üéØ Synthesis</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
    footer()
